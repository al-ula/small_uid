name: Deno

on:
  push:
    branches:
      - "*"
    tags:
      - "*-js"

jobs:
  build-wasm:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./rng
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@nightly
      - uses: cargo-bins/cargo-binstall@main

      - run: cargo binstall -y wasm-pack
      - run: wasm-pack build --release --no-pack --target web --out-dir ../typescript/rng
      - name: Use rng in artifact
        uses: actions/upload-artifact@v4
        with:
          name: rng-wasm
          path: typescript/rng
  test:
    needs: build-wasm
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./typescript
    steps:
      - uses: actions/checkout@v4
      - uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x # Run with latest stable Deno.

      - name: Download WASM artifact
        uses: actions/download-artifact@v4
        with:
          name: rng-wasm
          path: typescript/rng

      # Check if the code is formatted according to Deno's default
      # formatting conventions.
      - run: deno fmt --check

      # Scan the code for syntax errors and style issues. If
      # you want to use a custom linter configuration you can add a configuration file with --config <myconfig>
      - run: deno lint

      # Run all test files in the repository and collect code coverage. The example
      # runs with all permissions, but it is recommended to run with the minimal permissions your program needs (for example --allow-read).
      - run: deno test --allow-all --coverage=cov/
      # - name: Generate coverage report
      #   run: deno coverage --lcov cov > cov.lcov
      # - name: Upload coverage to Coveralls.io
      #   # Any code coverage service can be used, Coveralls.io is used here as an example.
      #   uses: coverallsapp/github-action@master
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }} # Generated by GitHub.
      #     path-to-lcov: cov.lcov

  publish-test:
    needs: test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./typescript
    permissions:
      contents: read
      id-token: write

    steps:
      - uses: actions/checkout@v4
      - uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x # Run with latest stable Deno.
      - name: Download WASM artifact
        uses: actions/download-artifact@v4
        with:
          name: rng-wasm
          path: typescript/rng
      - name: Install dependencies
        run: deno install
      - name: Publish package
        run: deno publish --dry-run --allow-dirty
      - name: Build typescript
        run: deno task build
      - uses: actions/setup-node@v3
        with:
          node-version: "20"
      - uses: JS-DevTools/npm-publish@v3
        id: npm-publish
        with:
          package: ./typescript/package.json
          dry-run: true
          token: ${{ secrets.NPM_TOKEN }}
      - if: ${{ steps.npm-publish.outputs.type }}
        run: echo "Version changed!"

  publish:
    needs: publish-test
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./typescript
    permissions:
      contents: read
      id-token: write

    steps:
      - uses: actions/checkout@v4
      - uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x # Run with latest stable Deno.
      - name: Download WASM artifact
        uses: actions/download-artifact@v4
        with:
          name: rng-wasm
          path: typescript/rng
      - name: Install dependencies
        run: deno install
      - name: Publish package
        run: deno publish --allow-dirty
      - name: Build typescript
        run: deno task build
      - uses: actions/setup-node@v3
        with:
          node-version: "20"
      - uses: JS-DevTools/npm-publish@v3
        id: npm-publish
        with:
          package: ./typescript/package.json
          token: ${{ secrets.NPM_TOKEN }}
      - if: ${{ steps.npm-publish.outputs.type }}
        run: echo "Version changed!"